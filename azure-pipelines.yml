trigger:
- main

variables:
  - name: terraform_version
    value: 1.3.0
  - group: Terraform

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: PolicyRepository
      type: github
      endpoint: amsilf
      name: amsilf/sc-policy-repo
      ref: main

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 1
          - task: Bash@3
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/sc-app/scripts/terraform-download.sh'
            displayName: 'Terraform Download'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'terraform init -backend-config="client_id=$(AZURE_CLIENT_ID)" -backend-config="client_secret=$(AZURE_CLIENT_SECRET)" -backend-config="tenant_id=$(AZURE_TENANT_ID)" -backend-config="storage_account_name=${STORAGE_ACCOUNT_NAME}" -backend-config="container_name=$(CONTAINER_NAME)" -backend-config="key=$(TF_STATE_KEY)" -backend-config="subscription_id=$(SUBSCRIPTION_ID)" -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)"'
              failOnStderr: true
              workingDirectory: "$(System.DefaultWorkingDirectory)/sc-app/infra-as-code/"
            displayName: 'Terraform Init'
            env:
              ARM_USE_MSI: true
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'terraform plan -input=false -out ${BUILD_BUILDNUMBER}.tfplan -var="client_secret=$(AZURE_CLIENT_SECRET)"'
              failOnStderr: true
              workingDirectory: "$(System.DefaultWorkingDirectory)/sc-app/infra-as-code/"
            displayName: 'Terraform Plan'
            env:
              ARM_USE_MSI: true  
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                terraform show -json ${BUILD_BUILDNUMBER}.tfplan > ${BUILD_BUILDNUMBER}-plan.json
              failOnStderr: true
              workingDirectory: "$(System.DefaultWorkingDirectory)/sc-app/infra-as-code/"
            displayName: 'Save Terraform plan'
          - task: OpenPolicyAgentInstaller@0
            inputs:
              opaVersion: 'latest'
            displayName: 'Install latest open policy agent'
          - checkout: PolicyRepository
            fetchDepth: 1
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                opa eval -i ${BUILD_BUILDNUMBER}-plan.json -d $(System.DefaultWorkingDirectory)/sc-policy-repo/terraform/vm/invalid_port.rego 'data'
              failOnStderr: true
              workingDirectory: "$(System.DefaultWorkingDirectory)/sc-app/infra-as-code/"
            displayName: 'Validate OPA Policies'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          #     ArtifactName: 'drop'
          #     publishLocation: 'Container'
          #   displayName: 'Publish Plan Artifact'

  # - stage: Deploy
  #   jobs:
  #   - deployment: 'DeployToProduction'
  #     environment: 'Infrastructure Production'
  #     strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #             - checkout: none
              
  #             - task: DownloadBuildArtifacts@0
  #               inputs:
  #                 artifactName: 'drop'
  #               displayName: 'Download Plan Artifact'

  #             - task: ExtractFiles@1
  #               inputs:
  #                 archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/drop/$(Build.BuildId).tgz'
  #                 destinationFolder: '$(System.DefaultWorkingDirectory)/'
  #                 cleanDestinationFolder: false
  #               displayName: 'Extract Plan Artifact'

  #             - task: Bash@3
  #               inputs:
  #                 targetType: 'inline'
  #                 script: |              
  #                   terraform apply -auto-approve -input=false ${BUILD_BUILDNUMBER}.tfplan
  #                 failOnStderr: true
  #                 workingDirectory: "$(System.DefaultWorkingDirectory)/infra-as-code/"
  #               displayName: 'Terraform Apply'